from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command
import asyncio

TOKEN = "uknown"

bot = Bot(token=TOKEN)
dp = Dispatcher()

lectures = {
    "do": [
        "–õ–µ–∫—Ü—ñ—è 1: –í—Å—Ç—É–ø —É –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ–π",
        "–õ–µ–∫—Ü—ñ—è 2: –õ—ñ–Ω—ñ–π–Ω–µ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è",
        "–õ–µ–∫—Ü—ñ—è 3: –°–∏–º–ø–ª–µ–∫—Å –º–µ—Ç–æ–¥ —Ä–æ–∑–≤‚Äô—è–∑–∞–Ω–Ω—è –∑–∞–¥–∞—á—ñ –ª—ñ–Ω—ñ–π–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è",
        "–õ–µ–∫—Ü—ñ—è 4: –î–≤–æ—ó—Å—Ç—ñ—Å—Ç—å —É –∑–∞–¥–∞—á–∞—Ö –ª—ñ–Ω—ñ–π–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è",
        "–õ–µ–∫—Ü—ñ—è 5: –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞ –∑–∞–¥–∞—á–∞",
        "–õ–µ–∫—Ü—ñ—è 6: –ó–∞–¥–∞—á—ñ –¥–∏—Å–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è",
        "–õ–µ–∫—Ü—ñ—è 7: –ú–µ—Ç–æ–¥–∏ –æ–¥–Ω–æ–≤–∏–º—ñ—Ä–Ω–æ—ó –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó",
        "–õ–µ–∫—Ü—ñ—è 8: –ù–µ–ª—ñ–Ω—ñ–π–Ω–µ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è",
        "–õ–µ–∫—Ü—ñ—è 9: –û–ø—É–∫–ª–µ —Ç–∞ –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–µ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è",
        "–õ–µ–∫—Ü—ñ—è 10: –ù–µ–ª—ñ–Ω—ñ–π–Ω–µ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è. –ú–µ—Ç–æ–¥–∏ –±–µ–∑—É–º–æ–≤–Ω–æ—ó –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó",
        "–õ–µ–∫—Ü—ñ—è 11: –ù–µ–ª—ñ–Ω—ñ–π–Ω–µ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è. –ú–µ—Ç–æ–¥–∏ —É–º–æ–≤–Ω–æ—ó –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó",
        "–õ–µ–∫—Ü—ñ—è 12: –î–∏–Ω–∞–º—ñ—á–Ω–µ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è",
        "–õ–µ–∫—Ü—ñ—è 13: –ù–µ–ª—ñ–Ω—ñ–π–Ω–µ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è –∑ —Å–µ–ø–∞—Ä–∞–±–µ–ª—å–Ω–∏–º–∏ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏. –î—Ä–æ–±–æ–≤–æ-–ª—ñ–Ω—ñ–π–Ω–µ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è",
        "–õ–µ–∫—Ü—ñ—è 14: –ß–∏—Å–µ–ª—å–Ω—ñ –º–µ—Ç–æ–¥–∏ —Ä–æ–∑–≤‚Äô—è–∑–∞–Ω–Ω—è –±–∞–≥–∞—Ç–æ–≤–∏–º—ñ—Ä–Ω–∏—Ö –∑–∞–¥–∞—á –Ω–µ–ª—ñ–Ω—ñ–π–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è –∑–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –æ–±–º–µ–∂–µ–Ω—å"
    ],
    "networks": [
        "–õ–µ–∫—Ü—ñ—è 1: –í—Å—Ç—É–ø —É –∫–æ–º–ø º—é—Ç–µ—Ä–Ω—ñ –º–µ—Ä–µ–∂—ñ",
        "–õ–µ–∫—Ü—ñ—è 2: PHY",
        "–õ–µ–∫—Ü—ñ—è 3: DataLink",
        "–õ–µ–∫—Ü—ñ—è 4: MAC",
        "–õ–µ–∫—Ü—ñ—è 5: Ethernet",
        "–õ–µ–∫—Ü—ñ—è 6: WiFi",
        "–õ–µ–∫—Ü—ñ—è 7: Routing",
        "–õ–µ–∫—Ü—ñ—è 8: Internetworking ",
        "–õ–µ–∫—Ü—ñ—è 9: IP",
        "–õ–µ–∫—Ü—ñ—è 10: ICMP ARP DHCP",
        "–õ–µ–∫—Ü—ñ—è 11: Transport",
        "–õ–µ–∫—Ü—ñ—è 12: TCP UDP",
        "–õ–µ–∫—Ü—ñ—è 13: DNS EMAIL",
        "–õ–µ–∫—Ü—ñ—è 14: HTTP",
        "–õ–µ–∫—Ü—ñ—è 15: WebAppSec"
    ]
}

@dp.message(Command("start"))
async def cmd_start(message: Message):
    keyboard = [
        [InlineKeyboardButton(text="–î–û", callback_data="do")],
        [InlineKeyboardButton(text="–ö–æ–º–ø'—é—Ç–µ—Ä–Ω—ñ –º–µ—Ä–µ–∂—ñ", callback_data="networks")]
    ]
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

    await message.answer(
        "–ü—Ä–∏–≤—ñ—Ç! üë©‚Äçüíª –Ø —Ç–≤—ñ–π –Ω–∞–≤—á–∞–ª—å–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫.\n"
        "–û–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç, –∑ —è–∫–∏–º –º–∏ –±—É–¥–µ–º–æ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏:",
        reply_markup=reply_markup
    )

@dp.callback_query()
async def process_subject(callback: types.CallbackQuery):
    subject = callback.data

    if subject in lectures:
        keyboard = [
            [InlineKeyboardButton(text=lec, callback_data=f"{subject}_{i}")]
            for i, lec in enumerate(lectures[subject], start=1)
        ]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

        await callback.message.answer(
            f"–¢–∏ –æ–±—Ä–∞–≤: { '–î–û' if subject == 'do' else '–ö–æ–º–ø‚Äô—é—Ç–µ—Ä–Ω—ñ –º–µ—Ä–µ–∂—ñ' }\n\n"
            "–û–±–µ—Ä–∏ –ª–µ–∫—Ü—ñ—é:",
            reply_markup=reply_markup
        )
    else:
        await callback.message.answer("–ù–µ–≤—ñ–¥–æ–º–∏–π –ø—Ä–µ–¥–º–µ—Ç")

    await callback.answer()

@dp.callback_query()
async def process_lecture(callback: types.CallbackQuery):
    data = callback.data.split("_")
    if len(data) == 2:
        subject, lecture_id = data
        if subject in lectures:
            lecture_title = lectures[subject][int(lecture_id) - 1]
            await callback.message.answer(f"–¢–∏ –æ–±—Ä–∞–≤: {lecture_title}\n\n(—Ç–µ–∫—Å—Ç —ñ–∑ PDF)")
    await callback.answer()

async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
