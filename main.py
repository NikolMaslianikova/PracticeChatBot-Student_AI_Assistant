import asyncio
from typing import Dict
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.filters import Command
import ollama

TOKEN = "unknown"
MODEL_NAME = "unknown"

bot = Bot(token=TOKEN)
dp = Dispatcher()

SUBJECT_READABLE = {"do": "–î–û (–î–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ–π)", "networks": "–ö–æ–º–ø‚Äô—é—Ç–µ—Ä–Ω—ñ –º–µ—Ä–µ–∂—ñ"}

PRESET_PROMPTS = {
    "short": "–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ—Ä–æ—Ç–∫–æ —ñ –¥–æ–¥–∞–≤–∞–π 1 –ø—Ä–∏–∫–ª–∞–¥.",
    "detailed_step": (
        "–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –±—ñ–ª—å—à –¥–µ—Ç–∞–ª—å–Ω–æ, –∫—Ä–æ–∫ –∑–∞ –∫—Ä–æ–∫–æ–º. "
        "–î–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫—Ä–æ–∫—É –¥–∞–≤–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫, –ø–æ—è—Å–Ω–µ–Ω–Ω—è, —Ñ–æ—Ä–º—É–ª–∏ –∞–±–æ –ø—Å–µ–≤–¥–æ–∫–æ–¥, –ø—Ä–∏–∫–ª–∞–¥ —ñ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω—ñ –ø–æ–º–∏–ª–∫–∏. "
        "–ù–∞–ø—Ä–∏–∫—ñ–Ω—Ü—ñ ‚Äî –∫–æ—Ä–æ—Ç–∫–∏–π –≤–∏—Å–Ω–æ–≤–æ–∫ —Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó."
    ),
    "detailed_analysis": (
        "–ü–æ—è—Å–Ω—é–π –¥—É–∂–µ –¥–µ—Ç–∞–ª—å–Ω–æ –π –∞–Ω–∞–ª—ñ—Ç–∏—á–Ω–æ: –¥–∞–π –¥–µ—Ç–∞–ª—å–Ω–∏–π –æ–ø–∏—Å, –ø–æ—Ç—ñ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ñ –ø—ñ–¥—Ö–æ–¥–∏ –∑ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è–º (–ø–ª—é—Å–∏/–º—ñ–Ω—É—Å–∏), "
        "–æ—Ü—ñ–Ω–∫—É —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ —Ç–∞ —á–∞—Å—É, –ø–æ–∫—Ä–æ–∫–æ–≤—É —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—é —ñ –ø—Ä–∏–∫–ª–∞–¥–∏ –∫–æ–¥—É/—Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—ñ–≤. –í–∫–∞–∑—É–π –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω—ñ –ø–æ–º–∏–ª–∫–∏."
        "–ù–∞–ø—Ä–∏–∫—ñ–Ω—Ü—ñ ‚Äî –∫–æ—Ä–æ—Ç–∫–∏–π –≤–∏—Å–Ω–æ–≤–æ–∫ —Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó."
    )
}

lectures = {
    "do": [
        "–õ–µ–∫—Ü—ñ—è 1: –í—Å—Ç—É–ø —É –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ–π",
        "–õ–µ–∫—Ü—ñ—è 2: –õ—ñ–Ω—ñ–π–Ω–µ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è",
        "–õ–µ–∫—Ü—ñ—è 3: –°–∏–º–ø–ª–µ–∫—Å –º–µ—Ç–æ–¥ —Ä–æ–∑–≤‚Äô—è–∑–∞–Ω–Ω—è –∑–∞–¥–∞—á—ñ –ª—ñ–Ω—ñ–π–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è",
        "–õ–µ–∫—Ü—ñ—è 4: –î–≤–æ—ó—Å—Ç—ñ—Å—Ç—å —É –∑–∞–¥–∞—á–∞—Ö –ª—ñ–Ω—ñ–π–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è",
        "–õ–µ–∫—Ü—ñ—è 5: –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞ –∑–∞–¥–∞—á–∞",
        "–õ–µ–∫—Ü—ñ—è 6: –ó–∞–¥–∞—á—ñ –¥–∏—Å–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è",
        "–õ–µ–∫—Ü—ñ—è 7: –ú–µ—Ç–æ–¥–∏ –æ–¥–Ω–æ–≤–∏–º—ñ—Ä–Ω–æ—ó –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó",
        "–õ–µ–∫—Ü—ñ—è 8: –ù–µ–ª—ñ–Ω—ñ–π–Ω–µ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è",
        "–õ–µ–∫—Ü—ñ—è 9: –û–ø—É–∫–ª–µ —Ç–∞ –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–µ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è",
        "–õ–µ–∫—Ü—ñ—è 10: –ù–µ–ª—ñ–Ω—ñ–π–Ω–µ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è. –ú–µ—Ç–æ–¥–∏ –±–µ–∑—É–º–æ–≤–Ω–æ—ó –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó",
        "–õ–µ–∫—Ü—ñ—è 11: –ù–µ–ª—ñ–Ω—ñ–π–Ω–µ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è. –ú–µ—Ç–æ–¥–∏ —É–º–æ–≤–Ω–æ—ó –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó",
        "–õ–µ–∫—Ü—ñ—è 12: –î–∏–Ω–∞–º—ñ—á–Ω–µ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è",
        "–õ–µ–∫—Ü—ñ—è 13: –ù–µ–ª—ñ–Ω—ñ–π–Ω–µ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è –∑ —Å–µ–ø–∞—Ä–∞–±–µ–ª—å–Ω–∏–º–∏ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏. –î—Ä–æ–±–æ–≤–æ-–ª—ñ–Ω—ñ–π–Ω–µ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è",
        "–õ–µ–∫—Ü—ñ—è 14: –ß–∏—Å–µ–ª—å–Ω—ñ –º–µ—Ç–æ–¥–∏ —Ä–æ–∑–≤‚Äô—è–∑–∞–Ω–Ω—è –±–∞–≥–∞—Ç–æ–≤–∏–º—ñ—Ä–Ω–∏—Ö –∑–∞–¥–∞—á –Ω–µ–ª—ñ–Ω—ñ–π–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è –∑–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –æ–±–º–µ–∂–µ–Ω—å"
    ],
    "networks": [
        "–õ–µ–∫—Ü—ñ—è 1: –í—Å—Ç—É–ø —É –∫–æ–º–ø º—é—Ç–µ—Ä–Ω—ñ –º–µ—Ä–µ–∂—ñ",
        "–õ–µ–∫—Ü—ñ—è 2: PHY",
        "–õ–µ–∫—Ü—ñ—è 3: DataLink",
        "–õ–µ–∫—Ü—ñ—è 4: MAC",
        "–õ–µ–∫—Ü—ñ—è 5: Ethernet",
        "–õ–µ–∫—Ü—ñ—è 6: WiFi",
        "–õ–µ–∫—Ü—ñ—è 7: Routing",
        "–õ–µ–∫—Ü—ñ—è 8: Internetworking",
        "–õ–µ–∫—Ü—ñ—è 9: IP",
        "–õ–µ–∫—Ü—ñ—è 10: ICMP ARP DHCP",
        "–õ–µ–∫—Ü—ñ—è 11: Transport",
        "–õ–µ–∫—Ü—ñ—è 12: TCP UDP",
        "–õ–µ–∫—Ü—ñ—è 13: DNS EMAIL",
        "–õ–µ–∫—Ü—ñ—è 14: HTTP",
        "–õ–µ–∫—Ü—ñ—è 15: WebAppSec"
    ]
}

SYSTEM_PROMPT_BASE = """
–¢–∏ ‚Äî –Ω–∞–≤—á–∞–ª—å–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤.
–î–æ–ø–æ–º–∞–≥–∞–π —Å—Ç—É–¥–µ–Ω—Ç–∞–º –∑—ñ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—ñ "–®—Ç—É—á–Ω–∏–π —ñ–Ω—Ç–µ–ª–µ–∫—Ç".
–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é, –∑—Ä–æ–∑—É–º—ñ–ª–æ –π –∫–æ—Ä–µ–∫—Ç–Ω–æ, —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–æ (—Å–ø–∏—Å–∫–∏/–∫—Ä–æ–∫–∏),
–∑ –ø—Ä–∏–∫–ª–∞–¥–∞–º–∏ –∑–∞ –ø–æ—Ç—Ä–µ–±–∏, –æ–ø–∏—Ä–∞—é—á–∏—Å—å –Ω–∞ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏ –∫—É—Ä—Å—É.
–Ø–∫—â–æ –ø–∏—Ç–∞–Ω–Ω—è –Ω–µ—á—ñ—Ç–∫–µ ‚Äî –∫–æ—Ä–æ—Ç–∫–æ —É—Ç–æ—á–Ω–∏.

–ü—Ä–µ–¥–º–µ—Ç: {subject}
–°—Ç–∏–ª—å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {style}
–õ–µ–∫—Ü—ñ—è: {lecture}
"""

user_subject: Dict[int, str] = {}
user_style: Dict[int, str] = {}
user_lecture: Dict[int, str] = {}

def subject_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–û", callback_data="subj:do")],
        [InlineKeyboardButton(text="–ö–æ–º–ø'—é—Ç–µ—Ä–Ω—ñ –º–µ—Ä–µ–∂—ñ", callback_data="subj:networks")]
    ])

def style_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ö–æ—Ä–æ—Ç–∫–æ + –ø—Ä–∏–∫–ª–∞–¥", callback_data="style:short")],
        [InlineKeyboardButton(text="–î–µ—Ç–∞–ª—å–Ω–æ, –∫—Ä–æ–∫–∏", callback_data="style:detailed_step")],
        [InlineKeyboardButton(text="–ì–ª–∏–±–æ–∫–æ-–∞–Ω–∞–ª—ñ—Ç–∏—á–Ω–æ", callback_data="style:detailed_analysis")],
    ])

def lectures_kb(subject: str) -> InlineKeyboardMarkup:
    rows = []
    for idx, lec in enumerate(lectures[subject], start=1):
        rows.append([InlineKeyboardButton(text=lec, callback_data=f"lec:{subject}:{idx}")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def build_system_prompt(user_id: int) -> str:
    subj_code = user_subject.get(user_id)
    style_key = user_style.get(user_id)
    lecture_title = user_lecture.get(user_id)

    subject_txt = SUBJECT_READABLE.get(subj_code, "‚Äî")
    style_txt = PRESET_PROMPTS.get(style_key, "–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –ø—Ä–æ—Å—Ç–æ —ñ –∑—Ä–æ–∑—É–º—ñ–ª–æ.")
    lecture_txt = lecture_title or "–ù–µ –≤–∏–±—Ä–∞–Ω–æ"

    return SYSTEM_PROMPT_BASE.format(subject=subject_txt, style=style_txt, lecture=lecture_txt)

async def ollama_chat_async(model: str, system_prompt: str, user_text: str) -> str:
    def _call():
        return ollama.chat(
            model=model,
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_text},
            ],
            options={"temperature": 0.2, "top_p": 0.9},
        )
    resp = await asyncio.to_thread(_call)
    return resp["message"]["content"]

@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤—ñ—Ç! üë©‚Äçüíª –Ø —Ç–≤—ñ–π –Ω–∞–≤—á–∞–ª—å–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫.\n"
        "–û–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç, –∑ —è–∫–∏–º –º–∏ –±—É–¥–µ–º–æ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏:",
        reply_markup=subject_kb()
    )

@dp.message(Command("status"))
async def cmd_status(message: Message):
    subj = user_subject.get(message.from_user.id)
    style = user_style.get(message.from_user.id)
    lec = user_lecture.get(message.from_user.id)
    await message.answer(
        "–°—Ç–∞—Ç—É—Å:\n"
        f"–ü—Ä–µ–¥–º–µ—Ç: {SUBJECT_READABLE.get(subj, '‚Äî')}\n"
        f"–°—Ç–∏–ª—å: {style or '‚Äî'}\n"
        f"–õ–µ–∫—Ü—ñ—è: {lec or '‚Äî'}\n\n"
        "–©–æ–± –∑–º—ñ–Ω–∏—Ç–∏: /start"
    )

@dp.message(Command("subject"))
async def cmd_subject(message: Message):
    await message.answer("–û–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç:", reply_markup=subject_kb())

@dp.message(Command("style"))
async def cmd_style(message: Message):
    if message.from_user.id not in user_subject:
        await message.answer("–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç: /start"); return
    await message.answer("–û–±–µ—Ä–∏ —Å—Ç–∏–ª—å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:", reply_markup=style_kb())

@dp.message(Command("lectures"))
async def cmd_lectures(message: Message):
    uid = message.from_user.id
    if uid not in user_subject:
        await message.answer("–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç: /start"); return
    if uid not in user_style:
        await message.answer("–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä–∏ —Å—Ç–∏–ª—å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: /style"); return
    await message.answer("–û–±–µ—Ä–∏ –ª–µ–∫—Ü—ñ—é:", reply_markup=lectures_kb(user_subject[uid]))


@dp.callback_query()
async def handle_callback(callback: CallbackQuery):
    data = callback.data or ""
    uid = callback.from_user.id

    if data.startswith("subj:"):
        subj = data.split(":")[1]
        if subj not in lectures:
            await callback.answer("–ù–µ–≤—ñ–¥–æ–º–∏–π –ø—Ä–µ–¥–º–µ—Ç", show_alert=True); return
        user_subject[uid] = subj
        user_style.pop(uid, None)
        user_lecture.pop(uid, None)
        await callback.message.answer(
            f"–ü—Ä–µ–¥–º–µ—Ç: {SUBJECT_READABLE[subj]}\n–û–±–µ—Ä–∏ —Å—Ç–∏–ª—å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:",
            reply_markup=style_kb()
        )
        await callback.answer(); return

    if data.startswith("style:"):
        style_key = data.split(":")[1]
        if style_key not in PRESET_PROMPTS:
            await callback.answer("–ù–µ–≤—ñ–¥–æ–º–∏–π —Å—Ç–∏–ª—å", show_alert=True); return
        user_style[uid] = style_key
        await callback.message.answer(
            "–°—Ç–∏–ª—å –æ–±—Ä–∞–Ω–æ.\n–û–±–µ—Ä–∏ –ª–µ–∫—Ü—ñ—é:",
            reply_markup=lectures_kb(user_subject[uid])
        )
        await callback.answer(); return

    if data.startswith("lec:"):
        _, subj, idx_str = data.split(":")
        idx = int(idx_str) - 1
        if subj not in lectures or idx < 0 or idx >= len(lectures[subj]):
            await callback.answer("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –ª–µ–∫—Ü—ñ—è", show_alert=True); return
        chosen = lectures[subj][idx]
        user_lecture[uid] = chosen
        await callback.message.answer(
            f"–õ–µ–∫—Ü—ñ—è: {chosen}\n–ú–æ–∂–µ—à —Å—Ç–∞–≤–∏—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –ø–æ —Ü—ñ–π –ª–µ–∫—Ü—ñ—ó."
        )
        await callback.answer(); return

    await callback.answer()

#user's message
@dp.message()
async def on_user_message(message: Message):
    uid = message.from_user.id
    if uid not in user_subject:
        await message.answer("–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç: /start"); return
    if uid not in user_style:
        await message.answer("–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä–∏ —Å—Ç–∏–ª—å: /style"); return
    if uid not in user_lecture:
        await message.answer("–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä–∏ –ª–µ–∫—Ü—ñ—é: /lectures"); return

    system_prompt = build_system_prompt(uid)
    user_text = message.text or ""

    try:
        await message.chat.do("typing")
        answer = await ollama_chat_async(MODEL_NAME, system_prompt, user_text)
        for i in range(0, len(answer), 3500):
            await message.answer(answer[i:i+3500])
    except Exception as e:
        await message.answer(
            "–ù–µ –≤–¥–∞–ª–æ—Å—å –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –ª–æ–∫–∞–ª—å–Ω–æ—ó –º–æ–¥–µ–ª—ñ.\n"
            "–ü–µ—Ä–µ–≤—ñ—Ä, —â–æ Ollama –∑–∞–ø—É—â–µ–Ω–∏–π —ñ –º–æ–¥–µ–ª—å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.\n"
            "–ü—Ä–∏–∫–ª–∞–¥–∏ –≤ —Ç–µ—Ä–º—ñ–Ω–∞–ª—ñ:\n"
            "  ollama list\n  ollama pull gemma3:4b\n  ollama run gemma3:4b \"hello\""
        )
        print("Ollama error:", e)

async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
