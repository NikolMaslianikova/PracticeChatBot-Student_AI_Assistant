from aiogram import types
from aiogram.filters import Command
from keyboards import subject_kb, style_kb, lectures_kb
from user_data import user_subject, user_style, user_lecture
from prompts import SUBJECT_READABLE

def func_commands(dp):
    @dp.message(Command("start"))
    async def cmd_start(message: types.Message):
        await message.answer(
            "–ü—Ä–∏–≤—ñ—Ç! üë©‚Äçüíª –Ø —Ç–≤—ñ–π –Ω–∞–≤—á–∞–ª—å–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫.\n"
            "–û–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç, –∑ —è–∫–∏–º –º–∏ –±—É–¥–µ–º–æ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏:",
            reply_markup=subject_kb()
        )

    @dp.message(Command("stop"))
    async def cmd_stop(message: types.Message):
        uid = message.from_user.id
        user_subject.pop(uid, None)
        user_style.pop(uid, None)
        user_lecture.pop(uid, None)
        await message.answer("–†–æ–∑–º–æ–≤—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ.\n–©–æ–± –ø–æ—á–∞—Ç–∏ –Ω–æ–≤—É ‚Äî –Ω–∞–ø–∏—à–∏ /start")

    @dp.message(Command("status"))
    async def cmd_status(message: types.Message):
        subj = user_subject.get(message.from_user.id)
        style = user_style.get(message.from_user.id)
        lec = user_lecture.get(message.from_user.id)
        await message.answer(
            "–°—Ç–∞—Ç—É—Å:\n"
            f"–ü—Ä–µ–¥–º–µ—Ç: {SUBJECT_READABLE.get(subj, '‚Äî')}\n"
            f"–°—Ç–∏–ª—å: {style or '‚Äî'}\n"
            f"–õ–µ–∫—Ü—ñ—è: {lec or '‚Äî'}\n\n"
            "–©–æ–± –∑–º—ñ–Ω–∏—Ç–∏: /start"
        )

    @dp.message(Command("subject"))
    async def cmd_subject(message: types.Message):
        await message.answer("–û–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç:", reply_markup=subject_kb())

    @dp.message(Command("style"))
    async def cmd_style(message: types.Message):
        if message.from_user.id not in user_subject:
            await message.answer("–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç: /start"); return
        await message.answer("–û–±–µ—Ä–∏ —Å—Ç–∏–ª—å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:", reply_markup=style_kb())

    @dp.message(Command("lectures"))
    async def cmd_lectures(message: types.Message):
        uid = message.from_user.id
        if uid not in user_subject:
            await message.answer("–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç: /start"); return
        if uid not in user_style:
            await message.answer("–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä–∏ —Å—Ç–∏–ª—å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: /style"); return
        await message.answer("–û–±–µ—Ä–∏ –ª–µ–∫—Ü—ñ—é:", reply_markup=lectures_kb(user_subject[uid]))
